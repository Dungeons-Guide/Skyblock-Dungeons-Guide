plugins {
    id "signing"
    id "idea"
    id "java"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "gg.essential.loom" version "0.10.0.+"
}

version = "4.0.0-beta12.4-experimental5.2"
group = "kr.syeyoung.dungeonsguide"
archivesBaseName = "dungeonsguide"

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

sourceSets.main {
    output.setResourcesDir(file("$buildDir/classes/java/main"))
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io/"
        content {
            includeGroupByRegex("(com|io)\\.github\\..+")
        }
    }
    maven { url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}

configurations {
    implementation.extendsFrom shadowImpl
    
    remappedMod {
        canBeConsumed = true
        canBeResolved = false
    }
    unmappedMod {
        canBeConsumed = true
        canBeResolved = false
    }
}

configurations {
    devenvMod {
        transitive = false
        visible = false
    }
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")


    implementation "org.jetbrains:annotations-java5:19.0.0"

//    shadowImpl "org.json:json:20240303"
    shadowImpl 'net.java.dev.jna:jna:5.12.1' // sorry minecraft... i had to
    shadowImpl("org.java-websocket:Java-WebSocket:1.5.1") {
        exclude group: "org.json", module: "json"
    }
    shadowImpl 'com.github.Dungeons-Guide:DiscordIPC:d403df89'
    shadowImpl "com.twelvemonkeys.imageio:imageio-bmp:3.7.0"

    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.16"

    testCompileOnly "org.projectlombok:lombok:1.18.20"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.20"


    compileOnly project(path: ":loader")

    devenvMod(project(path: ":loader", configuration: "unmappedMod"))
    modLocalRuntime("me.djtheredstoner:DevAuth-forge-legacy:1.1.0")
}

loom {
    launchConfigs {
        client {
            arg("--mods", configurations.devenvMod.files
                    .collect { file("../runtime").relativePath(it) }.join(","))
        }
    }
    runConfigs {
        named("client") {
            ideConfigGenerated(true)
            vmArgs.remove("-XstartOnFirstThread")
        }
    }
    runs {
        client {
            name = "Launch Dungeons Guide"
            runDir = '../runtime'
            property('devauth.enabled', 'true')
            property('dg.loader', 'devenv')
            client()
            vmArgs.remove("-XstartOnFirstThread")
        }
    }
    forge {
        pack200Provider.set(new dev.architectury.pack200.java.Pack200Adapter())
    }
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionInfo {
    ext.outputFile = file("$genOutputDir/versionMeta.properties")
    outputs.file(outputFile)
    doLast {
        outputFile.text = "VERSION=${project.version}\nMANDATORY_VERSION=0"
    }
}
sourceSets.main.output.dir genOutputDir, builtBy: generateVersionInfo

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Jar) {
    archivesBaseName = "dungeonsguide"
    manifest {}
}


tasks.shadowJar {
    archiveFileName = jar.archiveFileName

    configurations = [project.configurations.shadowImpl]

    dependencies {
        exclude(dependency("org.json:json")) // provided via loader
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
tasks.register("relocateShadowJar", ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "kr.syeyoung.dungeonsguide.libs"
}
tasks.shadowJar.dependsOn tasks.relocateShadowJar


tasks.named("remapJar") {
    archiveClassifier = "mapped"
    from(tasks.shadowJar)
    input = tasks.shadowJar.archiveFile
}


tasks.assemble.dependsOn tasks.remapJar

signing {
    required(project.findProperty("dg.dosign") == "true")
    useGpgCmd()
    sign configurations.archives
}

artifacts {
    remappedMod(tasks.remapJar)
    unmappedMod(tasks.shadowJar)
}


